import tkinter as tk
from tkinter import filedialog
import numpy as np
import pandas as pd
import matplotlib as mpl
import matplotlib.pyplot as plt
import xlrd
import folium

mpl.style.use('ggplot')  # optional: for ggplot-like style

# df = pd.read_excel('D:\Python\Visualizing Data\data.xlsx')
# print(df)


root = tk.Tk()

canvas1 = tk.Canvas(root, width=300, height=300, bg='lightsteelblue')
canvas1.pack()


def getExcel():
    global df
    sheetname = 'Usage'

    import_file_path = filedialog.askopenfilename()
    df = pd.read_excel(import_file_path, sheet_name= sheetname)
    # print (df)

browseButton_Excel = tk.Button(text='Import Excel File', command=getExcel, bg='green', fg='white',
                               font=('helvetica', 12, 'bold'))
canvas1.create_window(150, 150, window=browseButton_Excel)

root.mainloop()

def vs_barh():
    col = 'INSTANCE'
    obj = list(df[col])
    y_pos = np.arange(len(obj))

    df.plot(kind='barh',
        stacked=False,
        figsize=(20, 10),  # pass a tuple (x, y) size
        )
    plt.title('Resource Usage by Instances')
    plt.xlabel('Usage of CPU-RAM-HDD')
    plt.yticks(y_pos, obj)

    plt.show()

def vs_bar():
    col = 'INSTANCE'

    df.plot(kind='bar',
        stacked=False,
        figsize=(20, 10),  # pass a tuple (x, y) size
        )
    plt.title('Cluster Resources')
    plt.xlabel('Usage of CPU-RAM-HDD')
    plt.ylabel('Resource Usage')

    plt.show()

def cpu_pie():
    df.columns = list(map(str, df.columns))
    cpu = 'CPU'
    group = 'DEPT'
    col = 'INSTANCE'
    obj = list(df[col])
    y_pos = np.arange(len(obj))

    df_dept = df.groupby(group, axis=0).sum()
    print(df_dept)

    colors_list = ['gold', 'darkcyan', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink', 'gray', 'yellow', 'green', 'violet']
    explode_list = [0.1, 0, 0, 0, 0.1, 0.1]  # ratio for each continent with which to offset each wedge.

    df_dept[cpu].plot(kind='pie',
                                figsize=(15, 6),
                                autopct='%1.1f%%',
                                startangle=90,
                                shadow=True,
                                labels= None,  # turn off labels on pie chart
                                pctdistance=1.12,
                                # the ratio between the center of each pie slice and the start of the text generated by autopct
                                colors=colors_list  # add custom colors
                                #explode=explode_list  # 'explode' lowest 3 continents
                                )

    # scale the title up by 12% to match pctdistance
    plt.title('Resource Usage of CPU', y=1.12)

    plt.axis('equal')

    # add legend
    plt.legend(labels=df_dept.index, loc='upper right')

    plt.show()

def ram_pie():
    df.columns = list(map(str, df.columns))
    ram = 'RAM'
    group = 'DEPT'
    col = 'INSTANCE'
    obj = list(df[col])
    y_pos = np.arange(len(obj))

    df_dept = df.groupby(group, axis=0).sum()
    print(df_dept)

    colors_list = ['gold', 'darkcyan', 'lightcoral', 'lightskyblue', 'lightgreen', 'pink', 'gray', 'yellow', 'green', 'violet']
    explode_list = [0.1, 0, 0, 0, 0.1, 0.1]  # ratio for each continent with which to offset each wedge.

    df_dept[ram].plot(kind='pie',
                                figsize=(15, 6),
                                autopct='%1.1f%%',
                                startangle=90,
                                shadow=True,
                                labels= None,  # turn off labels on pie chart
                                pctdistance=1.12,
                                # the ratio between the center of each pie slice and the start of the text generated by autopct
                                colors=colors_list  # add custom colors
                                #explode=explode_list  # 'explode' lowest 3 continents
                                )

    # scale the title up by 12% to match pctdistance
    plt.title('Resource Usage of RAM', y=1.12)

    plt.axis('equal')

    # add legend
    plt.legend(labels=df_dept.index, loc='upper right')

    plt.show()


# Calling function here
# vs_barh()
# cpu_pie()
# ram_pie()

